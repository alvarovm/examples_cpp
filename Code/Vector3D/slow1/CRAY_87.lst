%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S u m m a r y   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Compilation
-----------
File     : /apps/common/UES/sandbox/jgp/sph-exa_mini-app.git/sandbox/vectorize/icc-performance-bugs-nf/bug1/main.cpp
Compiled : 2018-12-13  17:25:34
Compiler : Version 8.7.3
Ftnlx    : Version 8503 (libcif 85008)
Target   : x86-64
Command  : driver.CC -h cpu=broadwell -h static -D __CRAYXC -D __CRAY_BROADWELL
           -D __CRAYXT_COMPUTE_LINUX_TARGET -h network=aries -O 3 -h std=c++14
           -h noomp -h list=a -c main.cpp -o obj/main.o
           -W l,-rpath=/opt/cray/pe/cce/8.7.3/cce/x86_64/lib
           -isystem /opt/cray/pe/cce/8.7.3/cce/x86_64/include/craylibs
           -isystem /opt/gcc/6.1.0/snos/include/g++
           -isystem /opt/gcc/6.1.0/snos/include/g++/x86_64-suse-linux
           -isystem /opt/gcc/6.1.0/snos/include/g++/backward
           -isystem /opt/gcc/6.1.0/snos/lib/gcc/x86_64-suse-linux/6.1.0/include
           -isystem /opt/gcc/6.1.0/snos/lib/gcc/x86_64-suse-linux/6.1.0/include-
           fixed -isystem /opt/cray/pe/cce/8.7.3/cce/x86_64/include/c++
           -isystem /opt/cray/pe/cce/8.7.3/cce/x86_64/include/basic
           -isystem /opt/gcc/6.1.0/snos/include -isystem /usr/include
           -I /opt/cray/pe/mpt/7.7.2/gni/mpich-cray/8.6/include
           -I /opt/cray/pe/libsci/18.07.1/CRAY/8.6/x86_64/include
           -I /opt/cray/rca/2.2.18-6.0.7.0_33.3__g2aa4f39.ari/include
           -I /opt/cray/alps/6.6.43-6.0.7.0_26.4__ga796da3.ari/include
           -I /opt/cray/xpmem/2.2.15-6.0.7.1_5.8__g7549d06.ari/include
           -I /opt/cray/gni-headers/5.0.12.0-6.0.7.0_24.1__g3b1768f.ari/include
           -I /opt/cray/dmapp/7.1.1-6.0.7.0_34.3__g5a674e0.ari/include
           -I /opt/cray/pe/pmi/5.0.14/include
           -I /opt/cray/ugni/6.0.14.0-6.0.7.0_23.1__gea11d3d.ari/include
           -I /opt/cray/udreg/2.3.2-6.0.7.0_33.18__g5196236.ari/include
           -I /opt/cray/wlm_detect/1.3.3-6.0.7.0_47.2__g7109084.ari/include
           -I /opt/cray/krca/2.2.4-6.0.7.1_5.21__g8505b97.ari/include
           -I /opt/cray-hss-devel/8.0.0/include

clx report
------------
Source   : /apps/common/UES/sandbox/jgp/sph-exa_mini-app.git/sandbox/vectorize/icc-performance-bugs-nf/bug1/main.cpp
Date     : 12/13/2018  17:25:34


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          O p t i o n s   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Options :  -h cache2,scalar3,thread2,vector3,mpi0,ipa4,noaggress         
           -h autoprefetch,noautothread,fusion2,nomsgs,nonegmsgs         
           -h nooverindex,pattern,unroll2,nozeroinc         
           -h noadd_paren,noupc,dwarf,fma,nofp_trap,nofunc_trace         
           -h noomp_analyze,noomp_trace,nopat_trace         
           -h noomp,noacc         
           -h noc99,exceptions,noconform,noinfinitevl         
           -h notolerant,gnu         
           -h safe_addr,thread_do_concurrent,fp3=approx,flex_mp=default         
           -h alias=default:standard_restrict         
           -h static (or -static)         
           -h cpu=x86-64,broadwell
           -h network=aries         
           -K trap=none 


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S o u r c e   L i s t i n g
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


     %%%    L o o p m a r k   L e g e n d    %%%

     Primary Loop Type        Modifiers
     ------- ---- ----        ---------
     A - Pattern matched      a - atomic memory operation
                              b - blocked
     C - Collapsed            c - conditional and/or computed
     D - Deleted               
     E - Cloned                
     F - Flat - No calls      f - fused
     G - Accelerated          g - partitioned
     I - Inlined              i - interchanged
     M - Multithreaded        m - partitioned
                              n - non-blocking remote transfer
                              p - partial
     R - Rerolling            r - unrolled
                              s - shortloop
     V - Vectorized           w - unwound

     + - More messages listed at end of listing
     ------------------------------------------


    1.                     #include <iostream>
    2.                     #include <array>
    3.                     #include <algorithm>
    4.                     #include <chrono>
    5.                     #include <ctime>
    6.                     #include <initializer_list>
    7.                     
    8.                     // 3d vector POD
    9.                     class Vector3D
   10.                     {
   11.                     public:
   12.                       inline Vector3D(){}
   13.                     
   14.                       inline Vector3D(std::initializer_list<double> xyz2) noexcept
   15.                       {
   16.    I                    std::copy(xyz2.begin(), xyz2.end(), xyz.begin());
   17.                       }
   18.                     
   19.                       static constexpr std::size_t const DIM = 3;
   20.                       std::array<double,DIM> xyz;
   21.                     };
   22.                     
   23.                     inline Vector3D operator-(Vector3D const &lhs, Vector3D const &rhs)
   24.                     {
   25.                       Vector3D subtraction;
   26.    I                  subtraction.xyz[0] = lhs.xyz[0]-rhs.xyz[0];
   27.    I                  subtraction.xyz[1] = lhs.xyz[1]-rhs.xyz[1];
   28.    I                  subtraction.xyz[2] = lhs.xyz[2]-rhs.xyz[2];
   29.                       return subtraction;
   30.                     }
   31.                     
   32.                     // array of vector3D
   33.                     constexpr int const N = 256;
   34.                     using Vector3DField = std::array<Vector3D,N>;
   35.                     
   36.                     // Subtract 2 arrays of 3d vectors
   37.                     void subtract(Vector3DField const &lhs, Vector3DField const &rhs, Vector3DField &subtraction)
   38.                     {
   39.                       #pragma ivdep
   40.  + F--------------<   for(int i=0; i<N; ++i)
   41.    F I------------>     subtraction[i] = lhs[i] - rhs[i];
   42.                     };
   43.                     
   44.                     int main (int argc, char *argv[])
   45.                     {
   46.                         // Define unpredictable number at compile time
   47.                         double const numA = static_cast<double>(argc);
   48.    Ip  I                Vector3D const vecA = {numA, numA, numA};
   49.    Ip  I                Vector3D const vecB = {numA*2,numA*3,numA*4};
   50.                     
   51.                         // Array of structures of 3 doubles to test
   52.                         Vector3DField fieldVecA, fieldVecB, fieldVecC;
   53.  + I                    std::fill(fieldVecA.begin(), fieldVecA.end(), vecA);
   54.  + I                    std::fill(fieldVecB.begin(), fieldVecB.end(), vecB);
   55.                     
   56.                         // Start chrono
   57.                         std::chrono::time_point<std::chrono::system_clock> start, end;
   58.  +                      start = std::chrono::system_clock::now();
   59.                     
   60.                         // Function to vectorize (10M times to get a relevant computation time)
   61.                         int const nLoop = 10000000 - argc; // unpredictable loop count
   62.  + iF-------------<     for(int n=0; n<nLoop; n++)
   63.  + iF i I-------<>>       subtract(fieldVecA, fieldVecB, fieldVecC);
   64.                     
   65.                         // Stop chrono
   66.  + I                    int elapsed_seconds = std::chrono::duration_cast<std::chrono::milliseconds>
   67.                           (std::chrono::system_clock::now()-start).count();
   68.  +                      std::cout << "Elapsed time: " << elapsed_seconds << " ms " << std::endl;
   69.  + I                    std::cout << fieldVecC[0].xyz[0] << std::endl; // to forbid compiler to skip the whole computation
   70.                     };

CC-3021 CC: IPA __sti___7fb21f52_1c4b7d34, File = iostream, Line = 74, Column = 25 
  "Init" (called from "__sti___7fb21f52_1c4b7d34") was not inlined because the compiler was unable to locate the routine.

CC-3001 CC: IPA Vector3D, File = main.cpp, Line = 16, Column = 5 
  The call to tiny leaf routine "begin" was textually inlined.

CC-3001 CC: IPA Vector3D, File = main.cpp, Line = 16, Column = 5 
  The call to tiny routine "end" was textually inlined and flattened.

CC-3001 CC: IPA Vector3D, File = main.cpp, Line = 16, Column = 5 
  The call to tiny routine "begin" was textually inlined and flattened.

CC-3001 CC: IPA Vector3D, File = main.cpp, Line = 16, Column = 5 
  The call to tiny routine "copy<const_iterator, iterator>" was textually inlined and flattened.

CC-3001 CC: IPA operator-, File = main.cpp, Line = 26, Column = 3 
  The call to tiny routine "operator[]" was textually inlined and flattened.

CC-3001 CC: IPA operator-, File = main.cpp, Line = 26, Column = 3 
  The call to tiny routine "operator[]" was textually inlined and flattened.

CC-3001 CC: IPA operator-, File = main.cpp, Line = 26, Column = 3 
  The call to tiny routine "operator[]" was textually inlined and flattened.

CC-3001 CC: IPA operator-, File = main.cpp, Line = 27, Column = 3 
  The call to tiny routine "operator[]" was textually inlined and flattened.

CC-3001 CC: IPA operator-, File = main.cpp, Line = 27, Column = 3 
  The call to tiny routine "operator[]" was textually inlined and flattened.

CC-3001 CC: IPA operator-, File = main.cpp, Line = 27, Column = 3 
  The call to tiny routine "operator[]" was textually inlined and flattened.

CC-3001 CC: IPA operator-, File = main.cpp, Line = 28, Column = 3 
  The call to tiny routine "operator[]" was textually inlined and flattened.

CC-3001 CC: IPA operator-, File = main.cpp, Line = 28, Column = 3 
  The call to tiny routine "operator[]" was textually inlined and flattened.

CC-3001 CC: IPA operator-, File = main.cpp, Line = 28, Column = 3 
  The call to tiny routine "operator[]" was textually inlined and flattened.

CC-6315 CC: VECTOR subtract, File = main.cpp, Line = 40 
  A loop was not vectorized because the target array (subtraction) would require rank expansion.

CC-3182 CC: IPA subtract, File = main.cpp, Line = 40, Column = 3 
  Loop has been flattened.

CC-3001 CC: IPA subtract, File = main.cpp, Line = 41, Column = 5 
  The call to tiny routine "operator[]" was textually inlined and flattened.

CC-3001 CC: IPA subtract, File = main.cpp, Line = 41, Column = 5 
  The call to tiny routine "operator[]" was textually inlined and flattened.

CC-3001 CC: IPA subtract, File = main.cpp, Line = 41, Column = 5 
  The call to tiny routine "operator[]" was textually inlined and flattened.

CC-3001 CC: IPA subtract, File = main.cpp, Line = 41, Column = 5 
  The call to tiny routine "operator-" was textually inlined and flattened.

CC-3001 CC: IPA main, File = main.cpp, Line = 48, Column = 20 
  The call to tiny leaf routine "initializer_list" was textually inlined.

CC-3001 CC: IPA main, File = main.cpp, Line = 48, Column = 20 
  The call to tiny routine "Vector3D" was textually inlined.  NOT INLINED:  __cxa_call_unexpected.

CC-3001 CC: IPA main, File = main.cpp, Line = 49, Column = 20 
  The call to tiny leaf routine "initializer_list" was textually inlined.

CC-3001 CC: IPA main, File = main.cpp, Line = 49, Column = 20 
  The call to tiny routine "Vector3D" was textually inlined.  NOT INLINED:  __cxa_call_unexpected.

CC-6299 CC: VECTOR main, File = main.cpp, Line = 53 
  A loop was not vectorized because a recurrence was found involving "vecA" at line 53.

CC-3001 CC: IPA main, File = main.cpp, Line = 53, Column = 5 
  The call to tiny routine "begin" was textually inlined and flattened.

CC-3001 CC: IPA main, File = main.cpp, Line = 53, Column = 5 
  The call to tiny routine "end" was textually inlined and flattened.

CC-3001 CC: IPA main, File = main.cpp, Line = 53, Column = 5 
  The call to tiny routine "fill<iterator, Vector3D>" was textually inlined and flattened.

CC-6299 CC: VECTOR main, File = main.cpp, Line = 54 
  A loop was not vectorized because a recurrence was found involving "vecB" at line 54.

CC-3001 CC: IPA main, File = main.cpp, Line = 54, Column = 5 
  The call to tiny routine "begin" was textually inlined and flattened.

CC-3001 CC: IPA main, File = main.cpp, Line = 54, Column = 5 
  The call to tiny routine "end" was textually inlined and flattened.

CC-3001 CC: IPA main, File = main.cpp, Line = 54, Column = 5 
  The call to tiny routine "fill<iterator, Vector3D>" was textually inlined and flattened.

CC-3021 CC: IPA main, File = main.cpp, Line = 58, Column = 5 
  "now" (called from "main") was not inlined because the compiler was unable to locate the routine.

CC-6296 CC: VECTOR main, File = main.cpp, Line = 62 
  A loop was not vectorized because it contains an inner loop where a "#pragma _CRI ivdep" or "concurrent" directive was specified.

CC-6007 CC: SCALAR main, File = main.cpp, Line = 62 
  A loop was interchanged with the loop starting at line 63.

CC-3182 CC: IPA main, File = main.cpp, Line = 62, Column = 5 
  Loop has been flattened.

CC-6315 CC: VECTOR main, File = main.cpp, Line = 63 
  A loop was not vectorized because the target array (subtraction) would require rank expansion.
explain CC-6315
VECTOR: A loop was not vectorized because the target array (%s) would require
rank expansion.
When vectorizing a loop some scalar objects must be promoted to arrays. In
some contexts an array element is effectively a scalar and so poses no
problem to vectorization. There are other contexts in which an array must be
expanded to a higher rank array in order to vectorize. Though possible in
theory, such a transformation is very costly, and so rank expansion of arrays
is not supported. A small example of this issue occurs with the J-loop
below:
      DO J = 1, N
         A(1) = J
         A(2) = 2*J
         A(3) = 5*J
         do I = 1, 3
            B(I) = A(I)*A(I)
         enddo
      ENDDO
In some codes, like the preceeding, selective unwinding of inner loops can
avoid the array expansion problem.  An unroll directive that specifies the
full trip count of a loop acts as a command to unwind said loop.  Both the
trip count of the loop and the unroll amount must be known at compile time.
Care should be taken when unwinding inner loops to avoid array expansion.
This technique can lead to long compile times and very high vector register
pressure.  When the compiler is able to manage the register pressure well
this is often an effective method to improve memory/compute balance.

CC-3001 CC: IPA main, File = main.cpp, Line = 63, Column = 7 
  The call to tiny routine "subtract" was textually inlined and flattened.

CC-3021 CC: IPA main, File = main.cpp, Line = 66, Column = 25 
  "now" (called from "main") was not inlined because the compiler was unable to locate the routine.

CC-3001 CC: IPA main, File = main.cpp, Line = 66, Column = 25 
  The call to tiny routine "operator-<system_clock, duration, duration>" was textually inlined and flattened.

CC-3001 CC: IPA main, File = main.cpp, Line = 66, Column = 25 
  The call to tiny routine "duration_cast<milliseconds, int64_t, nano>" was textually inlined and flattened.

CC-3001 CC: IPA main, File = main.cpp, Line = 66, Column = 25 
  The call to tiny leaf routine "count" was textually inlined.

CC-3021 CC: IPA main, File = main.cpp, Line = 68, Column = 5 
  "operator<<<char_traits<char>>" (called from "main") was not inlined because the compiler was unable to locate the routine.

CC-3021 CC: IPA main, File = main.cpp, Line = 68, Column = 5 
  "operator<<" (called from "main") was not inlined because the compiler was unable to locate the routine.

CC-3021 CC: IPA main, File = main.cpp, Line = 68, Column = 5 
  "operator<<<char_traits<char>>" (called from "main") was not inlined because the compiler was unable to locate the routine.

CC-3021 CC: IPA main, File = main.cpp, Line = 68, Column = 5 
  "operator<<" (called from "main") was not inlined because the compiler was unable to locate the routine.

CC-3001 CC: IPA main, File = main.cpp, Line = 69, Column = 5 
  The call to tiny routine "operator[]" was textually inlined and flattened.

CC-3001 CC: IPA main, File = main.cpp, Line = 69, Column = 5 
  The call to tiny routine "operator[]" was textually inlined and flattened.

CC-3021 CC: IPA main, File = main.cpp, Line = 69, Column = 5 
  "operator<<" (called from "main") was not inlined because the compiler was unable to locate the routine.

CC-3021 CC: IPA main, File = main.cpp, Line = 69, Column = 5 
  "operator<<" (called from "main") was not inlined because the compiler was unable to locate the routine.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
